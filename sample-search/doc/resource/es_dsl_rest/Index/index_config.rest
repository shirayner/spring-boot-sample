#### 索引配置
@baseUrl = http://localhost:9200
@contentType = application/json

#### API 基本格式：http://<ip>:<port>/<索引>/<类型>/<文档 id>


############################
##### 一、更新索引配置
############################

### 1.更新副本数量
PUT  {{baseUrl}}/user/_settings
Content-Type: {{contentType}}

{
    "index": {
        "number_of_replicas": 3
    }
}


### 2.更新分析器，创建索引之后可以添加新的分析器

#### 2.1 添加分析器之前必须先关闭索引，添加之后再打开索引
POST  {{baseUrl}}/user/_close

#### 2.2 添加分析器
PUT  {{baseUrl}}/user/_settings
Content-Type: {{contentType}}

{
    "analysis": {
        "analyzer": {
            "content":{"type": "custom", "tokenizer":"whitespace"}
        }
    }
}

#### 2.3 打开索引
POST  {{baseUrl}}/user/_open



############################
##### 二、获取配置
############################

### 1.获取指定索引的参数配置
GET  {{baseUrl}}/user/_settings

### 2.获取所有索引的参数配置
GET  {{baseUrl}}/*/_settings


############################
##### 三、索引分析
############################

### 1.测试分析器
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "analyzer": "standard",
    "text": "this is a test"

}


### 2.自定义分析器-char_filter, 在Tokenizer之前对文本进行处理

#### 2.1 去除html标签
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "keyword",
    "char_filter": [
        "html_strip"
    ],
    "text": "this is a <b>test</b>"
}


#### 2.2 字符串替换
##### 2.2.1 中划线替换为下划线
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "standard",
    "char_filter": [
        {
            "type": "mapping",
            "mappings": [
                "- => _"
            ]
        }
    ],
    "text": "123-456, I-test! test-990 555-789-1114"
}

##### 2.2.2 表情替换为单词, 设置explain=true输出索引详情
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "standard",
    "char_filter": [
        {
            "type": "mapping",
            "mappings": [
                ":) => happy",
                ":( => sad"
            ]
        }
    ],
    "text": [
        "I am felling :)",
        "Felling :( today"
    ],
    "explain": true
}



#### 2.3 正则匹配替换
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "standard",
    "char_filter": [
        {
            "type": "pattern_replace",
            "pattern": "http://(.*)",
            "replacement": "$1"
        }
    ],
    "text": "http://www.elastic.co"
}


### 3.自定义分析器-Tokenizer, 将原始的文本按照一定的规则分词, 
#### es 内置 whitespace/standard/uax_url_email/pattern（正则）/keyword(不做处理，直接索引）/path hierarchy（路径处理）

#### 2.1 去除html标签
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
  "tokenizer": "path_hierarchy",
  "text": "/usr/jackMa/a/b/c/d/e"
}


### 4.自定义分析器-Token filters，将Tokenizer输出的单词（term)，进行增加，修改，删除
#### 自带的Token Filters：Lowercase / stop / synonym（添加近义词）


#### 4.1 whitespace与stop 实现is去除效果
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "whitespace",
    "filter": [
        "stop"
    ],
    "text": [
        "The stone is knocked"
    ]
}


#### 4.2  加入lowercase后，小写处理，然后The被当成stopword删除
POST  {{baseUrl}}/_analyze
Content-Type: {{contentType}}

{
    "tokenizer": "whitespace",
    "filter": [
        "lowercase",
        "stop"
    ],
    "text": [
        "The man sitting on the Chair is my classmate!"
    ]
}


############################
##### 四、索引模板
############################

### 1.创建索引模板
POST  {{baseUrl}}/_template/template_1
Content-Type: {{contentType}}

{
    "template": "te*",
    "settings":{
        "number_of_shards": 1
    },
    "mappings":{

        "_source": {
            "enabled": false
        }

    }
}


### 2.删除索引模板
DELETE  {{baseUrl}}/_template/template_1
Content-Type: {{contentType}}


### 3.获取索引模板
#### 3.1 获取所有索引模板
GET  {{baseUrl}}/_template

#### 3.2 获取指定索引模板
GET  {{baseUrl}}/_template/template_1

#### 3.3 获取索引模板， 使用通配符
GET  {{baseUrl}}/_template/temp*

#### 3.4 获取索引模板， 使用逗号分隔符
GET  {{baseUrl}}/_template/template_1,template_2

#### 3.5 判断索引模板是否存在
HEAD  {{baseUrl}}/_template/template_1



############################
##### 五、重建索引
############################

### 1.重建索引
POST  {{baseUrl}}/_reindex
Content-Type: {{contentType}}

{
    "source": {
        "index": "user"
    },
    "dest": {
        "index": "new_user"
    }
}